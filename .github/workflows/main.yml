name: GitHub Actions
run-name: ${{ github.actor }} is testing out ${{ github.repository }}

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'
      - 'LICENSE.md'
      - '.github/depandabot.yml'

jobs:
  Configure-Build-Install-Uninstall-Package-Upload:
    strategy:
      matrix:
          os:
            - ubuntu-latest
            - macos-15
            - windows-latest

          include:
            - os: ubuntu-latest
              triplet: x64-linux

            - os: macos-15
              triplet: x64-osx

            - os: windows-latest
              triplet: x64-windows

          tag:
            - v1.92.2
            - v1.92.1
            - v1.92.0
            - v1.91.9
            - v1.91.8
            - v1.91.7
            - v1.91.6
            - v1.91.5
            - v1.91.4
            - v1.91.3
            - v1.91.2
            - v1.91.1
            - v1.91.0
            - v1.90.9
            - v1.90.8
            - v1.90.7
            - v1.90.6
            - v1.90.5
            - v1.90.4
            - v1.90.3
            - v1.90.2
            - v1.90.1
            - v1.90
            - v1.89.9
            - v1.89.8
            - v1.89.7
            - v1.89.6
            - v1.89.3
            - v1.89.2
            - v1.89.1
            - v1.89
            - v1.88
            - v1.87
            - v1.86
            - v1.84
            - v1.83
            - v1.82
            - v1.81
            - v1.80

          build-type:
            - Debug

    runs-on: ${{ matrix.os }}
    steps:
      - run: echo "Triggered by ${{ github.event_name }} on ${{ github.repository }} using ${{ github.ref}} branch and running on ${{ runner.os }}."

      - name: Install required packages on Ubuntu
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install --assume-yes --fix-missing libxinerama-dev libxcursor-dev mesa-common-dev xorg-dev libglu1-mesa-dev pkg-config libltdl-dev

      - name: Install required packages on macOS
        if: matrix.os == 'macos-15'
        run: brew install --cask xquartz

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: '4.0.0'

      - name: Check out ImGui repository
        uses: actions/checkout@v4
        with:
          repository: ocornut/imgui
          show-progress: false
          ref: ${{ matrix.tag }}
          path: imgui

      - name: Check out CMakeForImGui
        uses: actions/checkout@v4
        with:
          show-progress: false
          path: CMakeForImGui

      - name: Define VCPKG_ROOT env var as an alias to VCPKG_INSTALLATION_ROOT
        shell: bash
        run: echo "VCPKG_ROOT=$VCPKG_INSTALLATION_ROOT" >> $GITHUB_ENV

      - name: Setup vcpkg
        uses: johnwason/vcpkg-action@v7
        id: vcpkg
        with:
          manifest-dir: ${{ github.workspace }}/CMakeForImGui
          triplet: ${{ matrix.triplet }}
          token: ${{ github.token }}

      - name: Configure and build on Ubuntu
        if: matrix.os == 'ubuntu-latest'
        run: |
          cd ${{ github.workspace }}/CMakeForImGui
          cmake -DIMGUI_SOURCE_DIR=${{ github.workspace }}/imgui -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/install.in.here --preset Linux
          cmake --build --preset Linux

      - name: Configure and build on macOS
        if: matrix.os == 'macos-15'
        run: |
          cd ${{ github.workspace }}/CMakeForImGui
          cmake -DIMGUI_SOURCE_DIR=${{ github.workspace }}/imgui -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/install.in.here --preset Darwin
          cmake --build --preset Darwin --config ${{ matrix.build-type }}

      - name:  Configure and build on Windows
        if: matrix.os == 'windows-latest'
        run: |
          cd ${{ github.workspace }}/CMakeForImGui
          cmake -DIMGUI_SOURCE_DIR=${{ github.workspace }}/imgui -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/install.in.here --preset Windows
          cmake --build --preset Windows --config ${{ matrix.build-type }}

      - name: Fix install paths on Windows
        if: matrix.os == 'windows-latest'
        run: >
          (Get-Content -Path "${{ github.workspace }}\\CMakeForImGui\\build\\cmake_install.cmake")
          | ForEach-Object {$_ -replace 'D:\\a\\CMakeForImGui\\', 'D:/a/CMakeForImGui/'}
          | Set-Content -Path "${{ github.workspace }}\\CMakeForImGui\\build\\cmake_install.cmake"

      - name: Install
        run: >
          cmake
          --build ${{ github.workspace }}/CMakeForImGui/build
          --target install
          --config ${{ matrix.build-type }}

      - name: Uninstall
        run: >
          cmake
          --build ${{ github.workspace }}/CMakeForImGui/build
          --target uninstall

      - name: Package
        run: >
          cmake
          --build ${{ github.workspace }}/CMakeForImGui/build
          --target package
          --config ${{ matrix.build-type }}

      - name: Upload
        uses: actions/upload-artifact@v4

        with:
          name: build.imgui-${{ matrix.tag }}.${{ matrix.os }}.${{ matrix.triplet }}.${{ matrix.build-type }}
          path: ${{ github.workspace }}/CMakeForImGui/build/package

      - run: echo "Job exited by ${{ job.status }}."

  Build-Android-example:
    runs-on: ubuntu-latest
    steps:
      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: '4.0.0'

      - name: Check out ImGui repository
        uses: actions/checkout@v4
        with:
          repository: ocornut/imgui
          show-progress: false
          path: imgui

      - name: Check out CMakeForImGui
        uses: actions/checkout@v4
        with:
          show-progress: false
          path: CMakeForImGui

      - name: Configure
        run: |
          cd ${{ github.workspace }}/CMakeForImGui
          cmake -DIMGUI_SOURCE_DIR=${{ github.workspace }}/imgui --preset Android

      - name: Build
        run: |
          cd ${{ github.workspace }}/CMakeForImGui
          cmake --build --preset Android

      - name: Upload
        uses: actions/upload-artifact@v4

        with:
          name: Example_Android_OpenGL3
          path: ${{ github.workspace }}/imgui/examples/example_android_opengl3/android/app/build/outputs/apk

